<?xml version="1.0"?>
<config>
  <modules>
    <Ndsl_Gpay>
      <version>0.1.1</version>
    </Ndsl_Gpay>
  </modules>
  <global>
    <helpers>
      <gpay>
        <class>Ndsl_Gpay_Helper</class>
      </gpay>
    </helpers>
	<blocks>
	  <gpay>
		<class>Ndsl_Gpay_Block</class>
	  </gpay>
	</blocks>
	<models>
		<sales>
            <rewrite>
                <order>Ndsl_Gpay_Model_Sales_Order</order>
            </rewrite>
		</sales>
	  <gpay>
		<class>Ndsl_Gpay_Model</class>
		<resourceModel>gpay_mysql4</resourceModel>
	  </gpay>
	  <gpay_mysql4>
		<class>Ndsl_Gpay_Model_Mysql4</class>
		<entities>		  
			  <gpay>
				<table>ndsl_gpay_gmanage</table>
			  </gpay>
              <gpay_quote>
                    <table>sales_quote_gpay</table>
              </gpay_quote>
              <gpay_order>
                    <table>sales_order_gpay</table>
              </gpay_order>
        </entities>
	  </gpay_mysql4>
	</models>
	<resources>
	  <gpay_setup>
		<setup>
		  <module>Ndsl_Gpay</module>
		</setup>
		<connection>
		  <use>core_setup</use>
		</connection>
	  </gpay_setup>
	  <gpay_write>
		<connection>
		  <use>core_write</use>
		</connection>
	  </gpay_write>
	  <gpay_read>
		<connection>
		  <use>core_read</use>
		</connection>
	  </gpay_read>
	  <salesattribute1506062069_setup>
		<setup>
		  <module>Ndsl_Gpay</module>
		  <class>Mage_Sales_Model_Mysql4_Setup</class>
		</setup>
		<connection>
		  <use>core_setup</use>
		</connection>
	  </salesattribute1506062069_setup>
	  <salesattribute1506062069_write>
		<connection>
		  <use>core_write</use>
		</connection>
	  </salesattribute1506062069_write>
	  <salesattribute1506062069_read>
		<connection>
		  <use>core_read</use>
		</connection>
	  </salesattribute1506062069_read>
	</resources>
    <events>
	  <sales_quote_save_before> <!-- identifier of the event we want to catch -->
        <observers>
          <sales_quote_save_before_handler> <!-- identifier of the event handler -->
            <type>singleton</type> <!-- class method call type; valid are model, object and singleton -->
            <class>gpay/observer</class> <!-- observers class alias -->
            <method>saveQuoteBefore</method>  <!-- observer's method to be called -->
            <args></args> <!-- additional arguments passed to observer -->
          </sales_quote_save_before_handler>
        </observers>
      </sales_quote_save_before>
	  <sales_quote_save_after> <!-- identifier of the event we want to catch -->
        <observers>
          <sales_quote_save_after_handler> <!-- identifier of the event handler -->
            <type>singleton</type> <!-- class method call type; valid are model, object and singleton -->
            <class>gpay/observer</class> <!-- observers class alias -->
            <method>saveQuoteAfter</method>  <!-- observer's method to be called -->
            <args></args> <!-- additional arguments passed to observer -->
          </sales_quote_save_after_handler>
        </observers>
      </sales_quote_save_after>
	  <sales_quote_load_after> <!-- identifier of the event we want to catch -->
        <observers>
          <sales_quote_load_after_handler> <!-- identifier of the event handler -->
            <type>singleton</type> <!-- class method call type; valid are model, object and singleton -->
            <class>gpay/observer</class> <!-- observers class alias -->
            <method>loadQuoteAfter</method>  <!-- observer's method to be called -->
            <args></args> <!-- additional arguments passed to observer -->
          </sales_quote_load_after_handler>
        </observers>
      </sales_quote_load_after>
	  <sales_model_service_quote_submit_after> <!-- identifier of the event we want to catch -->
        <observers>
          <sales_model_service_quote_submit_after_handler> <!-- identifier of the event handler -->
            <type>singleton</type> <!-- class method call type; valid are model, object and singleton -->
            <class>gpay/observer</class> <!-- observers class alias -->
            <method>saveOrderAfter</method>  <!-- observer's method to be called -->
            <args></args> <!-- additional arguments passed to observer -->
          </sales_model_service_quote_submit_after_handler>
        </observers>
      </sales_model_service_quote_submit_after>
	  <sales_order_load_after> <!-- identifier of the event we want to catch -->
        <observers>
          <sales_order_load_after_handler> <!-- identifier of the event handler -->
            <type>singleton</type> <!-- class method call type; valid are model, object and singleton -->
            <class>gpay/observer</class> <!-- observers class alias -->
            <method>loadOrderAfter</method>  <!-- observer's method to be called -->
            <args></args> <!-- additional arguments passed to observer -->
          </sales_order_load_after_handler>
        </observers>
      </sales_order_load_after>
	  <paypal_prepare_line_items> <!-- identifier of the event we want to catch -->
        <observers>
          <paypal_prepare_line_items_handler> <!-- identifier of the event handler -->
            <type>model</type> <!-- class method call type; valid are model, object and singleton -->
            <class>gpay/observer</class> <!-- observers class alias -->
            <method>updatePaypalTotal</method>  <!-- observer's method to be called -->
            <args></args> <!-- additional arguments passed to observer -->
          </paypal_prepare_line_items_handler>
        </observers>
      </paypal_prepare_line_items>
	  <sales_order_invoice_save_after> <!-- identifier of the event we want to catch -->
        <observers>
          <sales_order_invoice_save_after_handler> <!-- identifier of the event handler -->
            <type>model</type> <!-- class method call type; valid are model, object and singleton -->
            <class>gpay/observer</class> <!-- observers class alias -->
            <method>invoiceSaveAfter</method>  <!-- observer's method to be called -->
            <args></args> <!-- additional arguments passed to observer -->
          </sales_order_invoice_save_after_handler>
        </observers>
      </sales_order_invoice_save_after>
	  <sales_order_creditmemo_save_after> <!-- identifier of the event we want to catch -->
        <observers>
          <sales_order_creditmemo_save_after_handler> <!-- identifier of the event handler -->
            <type>model</type> <!-- class method call type; valid are model, object and singleton -->
            <class>gpay/observer</class> <!-- observers class alias -->
            <method>creditmemoSaveAfter</method>  <!-- observer's method to be called -->
            <args></args> <!-- additional arguments passed to observer -->
          </sales_order_creditmemo_save_after_handler>
        </observers>
      </sales_order_creditmemo_save_after>
	<checkout_type_onepage_save_order_after> <!-- identifier of the event we want to catch -->
        <observers>
          <checkout_type_onepage_save_order_after_gpay_handler> <!-- identifier of the event handler -->
            <type>model</type> <!-- class method call type; valid are model, object and singleton -->
            <class>gpay/newordertotalobserver</class> <!-- observers class alias -->
            <method>saveGpayTotal</method>  <!-- observer's method to be called -->
            <args></args> <!-- additional arguments passed to observer -->
          </checkout_type_onepage_save_order_after_gpay_handler>
	    </observers>
      </checkout_type_onepage_save_order_after>		
	<checkout_type_multishipping_create_orders_single> <!-- identifier of the event we want to catch -->
        <observers>		
          <checkout_type_multishipping_create_orders_single_gpay_handler> <!-- identifier of the event handler -->
            <type>model</type> <!-- class method call type; valid are model, object and singleton -->
            <class>gpay/newordertotalobserver</class> <!-- observers class alias -->
            <method>saveGpayTotalForMultishipping</method>  <!-- observer's method to be called -->
            <args></args> <!-- additional arguments passed to observer -->
          </checkout_type_multishipping_create_orders_single_gpay_handler>		
        </observers>
      </checkout_type_multishipping_create_orders_single>
    </events>	
	 <sales>
		<quote>
			<totals>				
	            <gpay_total>
					<class>gpay/quote_address_total_gpay</class>
					<after>subtotal,freeshipping,tax_subtotal,shipping</after>
					<before>grand_total</before>
				</gpay_total> 
			</totals>
		</quote>
            <order_invoice>
                <totals>				
	            <gpay_total>
					<class>gpay/order_invoice_total_gpay</class>
					<after>subtotal,freeshipping,tax_subtotal,shipping</after>
					<before>grand_total</before>
				</gpay_total> 
                </totals>
            </order_invoice>
            <order_creditmemo>
                <totals>				
	            <gpay_total>
					<class>gpay/order_creditmemo_total_gpay</class>
					<after>subtotal,freeshipping,tax_subtotal,shipping</after>
					<before>grand_total</before>
				</gpay_total> 
                </totals>
            </order_creditmemo>
	</sales>
  </global>
  <admin>
	<routers>
	  <gpay>
	    <use>admin</use>
		<args>
		  <module>Ndsl_Gpay</module>
		  <frontName>admin_gpay</frontName>
		</args>
	  </gpay>
	</routers>
  </admin>
  <adminhtml>
	<menu>
	  <gpay module="gpay">
		<title>Gpay</title>
		<sort_order>100</sort_order>
		<children>
		  <gpay module="gpay">
		    <title>Manage Gpay</title>
			<sort_order>0</sort_order>
			<action>admin_gpay/adminhtml_gpay</action>
		  </gpay>
		</children>
	  </gpay>
	</menu>
	<acl>
	  <resources>
		<all>
		  <title>Allow Everything</title>
		</all>
		<admin>
		  <children>
			<gpay translate="title" module="gpay">
			  <title>Gpay</title>
			  <sort_order>1000</sort_order>
			  <children>
		  <gpay translate="title">
			<title>Manage Gpay</title>
			<sort_order>0</sort_order>
		  </gpay>
			  </children>
			</gpay>
		  </children>
		</admin>
	  </resources>
	</acl>
	<layout>
	  <updates>
		<gpay>
		  <file>gpay.xml</file>
		</gpay>
	  </updates>
	</layout>
  </adminhtml>
</config> 